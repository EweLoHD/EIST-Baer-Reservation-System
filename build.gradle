plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'

    id "com.github.node-gradle.node" version "3.3.0"
}

group = 'hello.world'
version = '1.0.0'
sourceCompatibility = '17'
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

sourceSets {
    main {
        java {
            srcDir 'server/src/main/java'
        }
        resources {
            srcDir 'server/src/main/resources'
        }
    }
    /*test {
        java {
            srcDir 'server/src/test/java'
        }
        resources {
            'server/src/test/resources'
        }
    }*/

}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

test {
    defaultCharacterEncoding = 'UTF-8'
    useJUnitPlatform()
}

node {
    nodeProjectDir = file("${project.projectDir}/client")
    download = true
}

// Install all dependencies for the client server
task install(type: NpmTask) {
    group = "client"
    description = "Install all dependencies for the client server"

    args = ['install']
}

// Start the client server
task runDev(type: NpmTask) {
    group = "client"
    description = "Start the client server"

    args = ['run', 'dev']
}